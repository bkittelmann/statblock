from optparse import OptionParser
from lxml import etree
from statblock.transform.xml import StatblockTypeMap
import py

from statblock.armor import ChainMail
from statblock.character import Character
from statblock.character import MeleeAttackCombination
from statblock.character import RangedAttackCombination
from statblock.feat import PowerAttack
from statblock.feat import WeaponFocus
from statblock.transform.xml import XmlTransformer
from statblock.weapon import Longbow
from statblock.weapon import Longsword


def debug_display(output="render"):
    "Can be used to display the X(HT)ML output generated by the transformer."
    character = build_character()
    transformer = XmlTransformer()
    if output == "xml":
        return transformer.toXml(character)
    return transformer.toXhtml(character)
    

def build_character():
    "Test data builder for a simple fighter."
    fighter = Character()
    fighter.name = "Cpl. Tomm Colworn"
    fighter.languages.append("Draconic")
    
    # set some abilities so that we get interesting output in XHTML
    fighter.abilities.dexterity = 12
    fighter.abilities.wisdom = 14
    fighter.abilities.constitution = 14
    fighter.abilities.strength = 16
    
    # add a few weapons
    sword = fighter.weapons.add(Longsword())
    bow = fighter.weapons.add(Longbow())
    
    fighter.melee.append(MeleeAttackCombination(sword))
    fighter.ranged.append(RangedAttackCombination(bow))

    # and some armor
    fighter.armor = ChainMail()
    
    # set some feats
    fighter.feats.add(PowerAttack())
    fighter.feats.add(WeaponFocus(sword))
    return fighter

    
def test_xhtml():
    xhtml = XmlTransformer().toXhtml(build_character())
    output = etree.fromstring(xhtml)
    
    # are languages written correctly?
    lang1, lang2 = output.xpath("//span[contains(., 'Language')]/text()")[0].split(",")
    assert lang1.strip() == "Common"
    assert lang2.strip() == "Draconic"
    
    
def test_xml():
    xml = XmlTransformer().toXml(build_character())
    output = etree.fromstring(xml)
    assert output.xpath("count(//language)") == 2
    assert output.xpath("string(//size)") == "Medium"
    assert output.xpath("number(//initiative)") == 1


def test_typemap_copies_itself():
    first = StatblockTypeMap()
    assert isinstance(first.copy(), StatblockTypeMap)


def test_typemap_is_treated_as_true_in_boolean_context():
    assert bool(StatblockTypeMap()) is True


if __name__ == '__main__':
    # for debugging, it's easier to directly see the XML or XHTML produced
    usage = """To show the rendered XHTML in a browser, use the bcat utility:

    python test_xml.py -r | bcat

bcat can be found at http://rtomayko.github.com/bcat/"""

    parser = OptionParser(usage=usage)
    parser.add_option('-t', action="store_const", const="test", dest="action", help="run py.test")
    parser.add_option('-x', action="store_const", const="xml", dest="action", help="create xml")
    parser.add_option('-r', action="store_const", const="render", dest="action", help="render xhtml")
    parser.set_default("action", "test")
    (options, args) = parser.parse_args()
    
    if options.action == "test":
        py.cmdline.pytest(["-s", __file__])
        exit(0)
    print debug_display(output=options.action)
